{"name":"Purephp","tagline":"PurePHP Key-Value Storage","body":"# PurePHP Key-Value Storage\r\nThis is simple key-value storage written on PHP.\r\n\r\n## Installation\r\nVia Composer:\r\n\r\n```\r\ncomposer require elfet/pure:~0.1\r\n```\r\n\r\nVia Phar file:\r\n\r\n```\r\nDownload link will be later.\r\n```\r\n\r\n[Download zip](https://github.com/elfet/purephp/archive/v0.1.1.zip) archive of repository, extract it and run next commands:\r\n\r\n```\r\ncomposer install --dev\r\nphp compile\r\nmv pure.phar /usr/local/bin/pure\r\nchmod +x /usr/local/bin/pure\r\n```\r\n\r\n## Quick Guide\r\nStart PurePHP by this command:\r\n\r\n```\r\npure start &\r\n```\r\n\r\nNow PurePHP server is running. Run this command:\r\n\r\n```\r\npure client\r\n```\r\n\r\nNow you can test PurePHP by simple commands like this:\r\n\r\n```\r\n> pure.stack.test.push('hello wolrd!')\r\nbool(true)\r\n> pure.stack.test.pop()\r\nstring(12) \"hello wolrd!\"\r\n>\r\n```\r\n\r\nIn pure console you can write commands on [Expression Language](https://github.com/symfony/expression-language). To exit from console type `exit` command.\r\n\r\n## Documentation\r\n\r\n### Connection to PurePHP server\r\n```php\r\n$port = 1337; // Default port value\r\n$host = '127.0.0.1'; // Default host value\r\n//...\r\n$pure = new Pure\\Clent($port, $host);\r\n```\r\n\r\n### Storages\r\n\r\nPurePHP provide diffrent types on stogares. All supported storages are in [src/Storage](https://github.com/elfet/purephp/tree/master/src/Storage). You can access them by next methods and work with them like you work with them directly.\r\n\r\nEvery storage has separate collection namespace. So you can have for different storages same collection names.\r\nYou do not need to manualy create any collection. They will be automatically create at first access.\r\n\r\n```php\r\n$pure->of('collection')->...\r\n$pure->stack('collection')->...\r\n$pure->queue('collection')->...\r\n$pure->prioriry('collection')->...\r\n$pure->lifetime('collection')->...\r\n```\r\n\r\nOr you can access them by magic methods.\r\n\r\n```php\r\n$pure->of->collection->...\r\n$pure->stack->collection->...\r\n$pure->queue->collection->...\r\n//...\r\n```\r\n\r\n### Array Storage `->of`\r\n\r\nThis is simple storage what uses php array to store your data. \r\nTo store date in collection use `push` method:\r\n```php\r\n$pure->of('collection')->push(['hello' => 'world']);\r\n```\r\nArray Storage uses `array_merge` function.\r\n\r\nTo get value by key from collection use `get` method:\r\n```php\r\n$value = $pure->of('collection')->get('hello'); // will return 'world'.\r\n```\r\n\r\nTo receive all elements use `all` method:\r\n```php\r\n$all = $pure->of('collection')->all();\r\n```\r\n\r\nTo delete all elements use `clear` method:\r\n```php\r\n$all = $pure->of('collection')->clear();\r\n```\r\n\r\nYou can check if key exist by `has` method, and delete element by `delete` method.\r\n\r\n### Stack Storage `->stack`\r\n\r\nThis storage use `SplStack` to store your data.\r\n\r\nYou can use all `SplStack` methods and also `all`, `clear` methods.\r\n\r\n### Queue Storage `->queue`\r\n\r\nThis storage use `SplQueue` to store your data.\r\n\r\nYou can use `SplQueue` methods and also `all`, `clear` methods.\r\n\r\n`SplQueue` uses `enqueue` and `deenqueue` to push and pop from queue. In QueueStorage your can use `push` and `pop` methods to do this.\r\n\r\n### Priority Queue Storage `->priority`\r\n\r\nThis storage use `SplPriorityQueue` to store your data.\r\n\r\nYou can use all `SplPriorityQueue` methods and also `all`, `clear` methods.\r\n\r\n### Lifetime Storage `->lifetime`\r\n\r\nIn this storage you can store data which need to be deleted after some period. Life time in seconds.\r\n\r\n```php\r\n$pure->lifetime('collection')->set($key, $value, $lifetime);\r\n```\r\n\r\nYou can get all elements by `all` method, check if key exist by `has` method, and delete element by `delete` method.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}